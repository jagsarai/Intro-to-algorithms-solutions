def goodbye_world(n)
 puts "Goodbye World! #{n}"
end

1. The complexity of the above function is O(1) because the function will print the inputed data and end. There is no iteration to do. We complete the function in one operation. 

def find_largest(collection)
 largest = collection[0]
 collection.length.times do |i|
   if collection[i] >= largest
     largest = collection[i]
   end
 end
 largest

2. This function has a O(n) time complexity beacuse we will have to go through the entire array each and every time to find out the largest number. It will iterrate through each element in the array and compare it with the largest variable. And then it will determine if that element is greater than the largest. 


def find_largest(collection)
 largest = collection[0][0]
 collection.length.times do |i|
   subcollection = collection[i]
   subcollection.length.times do |i|
     if subcollection[i] >= largest
       largest = subcollection[i]
     end
   end
 end
 largest
end

3. 

def numbers(n)
 if (n == 0)
   return 0
 elsif (n == 1)
   return 1
 else
   return numbers(n-1) + numbers(n-2)
 end
end

4. The time complexity for this recurssive algoritim is O(2^n). We can reduce our time complexity to the follow formula. We can assume that n-2 aproximately equals n-1 for very large numbers of n. Therfore T(n) = 2T(n-1) + c, where c is some constant number of opertaions performed in our function. So in general we know that T(n) = 2^kT(n-k) + (2^k-1)c . Our base cause is 0 so when we get t(0) = n - k. If we solve for k then we get 2^nT(0) + (2^n-1)c. If we drop all of our insignificant values and constants we are left with 2^n. 

def iterative(n)
 num1 = 0
 num2 = 1

 i = 0
 while i < n-1
   tmp = num1 + num2
   num1 = num2
   num2 = tmp
   i+=1
 end

 num2
end

5. The time complexity for this algoritim is O(n) becuase we are going to loop from 0 to n-1 times and each time we will perform 4 operations. So we are left with a generic formula of (n-1) + 4c. If we drop all the insignificant terms then we are left with n. 


def sort(collection, from=0, to=nil)
 if to == nil
   # Sort the whole collection, by default
   to = collection.count - 1
 end

 if from >= to
   # Done sorting
   return
 end

 # Take a pivot value, at the far left
 pivot = collection[from]

 # Min and Max pointers
 min = from
 max = to

 # Current free slot
 free = min

 while min < max
   if free == min # Evaluate collection[max]
     if collection[max] <= pivot # Smaller than pivot, must move
       collection[free] = collection[max]
       min += 1
       free = max
     else
       max -= 1
     end
   elsif free == max # Evaluate collection[min]
     if collection[min] >= pivot # Bigger than pivot, must move
       collection[free] = collection[min]
       max -= 1
       free = min
     else
       min += 1
     end
   else
     raise "Inconsistent state"
   end
 end

 collection[free] = pivot

 sort collection, from, free - 1
 sort collection, free + 1, to

 collection
end

6. The runtime for this algoritim is O(n^2). Our worst case senario is that we get a complete unbalanced split of pivot value, meaning that our values are all greater than or all less than our pivot and thus we would only eliminate one value in each call to sort and the other sort call would just retrun. Therefore for n number of elements in our array our while loop would run n-1 times in the worst case. So after eliminating all constants and lower terms, we are simply left with (n^2 - n) and we can further reduce that to n^2. 